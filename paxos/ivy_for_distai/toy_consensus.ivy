#lang ivy1.7

# Source: https://github.com/microsoft/ivy/blob/master/examples/ivy/toy_consensus.ivy 

type node
type value
type quorum

relation member(N:node, Q:quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

relation vote(N:node, V:value)
relation decision(V:value)

#relation didNotVote(N:node) = forall V. ~vote(N, V)
#relation chosenAt(Q:quorum, V:value) = forall N. member(N, Q) -> vote(N, V)

after init  {
    vote(N,V) := false ;
    decision(V) := false;
}

action cast_vote(n:node, v:value) = {
    assume forall V. ~vote(n, V);
    vote(n, v) := true;
}

action decide(v:value, q:quorum) = {
    assume forall N. member(N, q) -> vote(N, v);
    decision(v) := true;
}

export cast_vote
export decide

# safety property:
invariant [1000000] decision(V1) & decision(V2) -> V1 = V2

#invariant [manual_1] vote(N,V1) & vote(N,V2) -> V1 = V2
#invariant [manual_2] decision(V) -> exists Q:quorum. forall N:node. member(N, Q) -> vote(N,V)
