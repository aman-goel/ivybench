#lang ivy1.7

# A simplified, abstract specification of the Paxos algorithm. msg_1b does not keep 
# track of the maximum ballot (and the corresponding value) in which an 
# acceptor voted. Instead, the history of all votes cast is used to describe 
# how new votes are cast. This specification is inspired from the abstract 
# specification of Generalized Paxos presented in the Generalized Paxos 
# paper by Lamport.

type value
type acceptor
type quorum
type ballot

# A total order helper module
module total_order(r) = {
    axiom r(X, X)                       # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}

relation le(X:ballot, Y:ballot)
instantiate total_order(le)
individual negone:ballot
axiom le(negone, X)
individual max:ballot
axiom le(X, max)

relation member(A:acceptor, Q:quorum)
axiom forall Q1, Q2. exists A:acceptor. member(A, Q1) & member(A, Q2)

relation msg_1a(B:ballot)
relation msg_1b(A:acceptor, B:ballot)
relation msg_2a(B:ballot, V:value)
relation msg_2b(A:acceptor, B:ballot, V:value)
function maxBal(A:acceptor):ballot

# Definitions
#relation chosenAt(B:ballot, V:value) = exists Q. forall A. member(A, Q) -> msg_2b(A, B, V)
#relation chosen(V:value) = exists B. chosenAt(B, V)
#relation showsSafeAt(Q:quorum, B:ballot, V:value) = ((forall A:acceptor. member(A, Q) -> le(B, maxBal(A))) & 
#													(exists C:ballot. ~le(B, C) & 
#														(C ~= negone -> exists A:acceptor. member(A, Q) & msg_2b(A, C, V)) & 
#														(forall D:ballot. (~le(D, C) & ~le(B, D)) -> 
#															(forall A:acceptor. member(A, Q) -> (forall Vd:value. ~msg_2b(A, D, Vd))))))
#relation isSafeAt(B:ballot, V:value) = exists Q:quorum. showsSafeAt(Q, B, V)
#
#relation showsSafeAtPaxosSimple(Q:quorum, B:ballot, V:value) =
#		(	(forall A. member(A, Q) -> msg_1b(A, B)) & 
#		(	(forall A, MBAL, MVAL. ~(member(A, Q) & msg_1b(A, B) & msg_2b(A, MBAL, MVAL))) |
#			(exists MBAL.	(exists A. member(A, Q) & msg_1b(A, B) & msg_2b(A, MBAL, V)) &
#							(forall A, MBAL2, MVAL2. member(A, Q) & msg_1b(A, B) & msg_2b(A, MBAL2, MVAL2) -> le(MBAL2, MBAL)))
#		))
#relation isSafeAtPaxosSimple(B:ballot, V:value) = exists Q:quorum. showsSafeAtPaxosSimple(Q, B, V)

after init {
    maxBal(A) := negone;
    msg_1a(B) := false;
    msg_1b(A, B) := false;
    msg_2a(B, V) := false;
    msg_2b(A, B, V) := false;
}

action phase_1a(b:ballot) = {
    require b ~= negone;
    
    msg_1a(b) := true;
}

action phase_1b(a:acceptor, b:ballot) = {
    require b ~= negone;
    require msg_1a(b);
    require ~le(b, maxBal(a));
    
    maxBal(a) := b;
    msg_1b(a, b) := true;
}

action phase_2a(b:ballot, v:value) = {
    require b ~= negone;
    require ~(exists V. msg_2a(b, V));
	require exists Q:quorum.
		(	(forall A. member(A, Q) -> msg_1b(A, b)) & 
		(	(forall A, MBAL, MVAL. ~(member(A, Q) & msg_1b(A, b) & msg_2b(A, MBAL, MVAL))) |
			(exists MBAL.	(exists A. member(A, Q) & msg_1b(A, b) & msg_2b(A, MBAL, v)) &
							(forall A, MBAL2, MVAL2. member(A, Q) & msg_1b(A, b) & msg_2b(A, MBAL2, MVAL2) -> le(MBAL2, MBAL)))
		));
	
    msg_2a(b, v) := true;
}

action phase_2b(a:acceptor, b:ballot, v:value) = {
    require b ~= negone;
    require msg_2a(b, v);
    require le(maxBal(a), b);

    maxBal(a) := b;
    msg_2b(a, b, v) := true;
}

export phase_1a
export phase_1b
export phase_2a
export phase_2b

# the safety property
invariant [safety] forall V1, V2. 	(exists B. exists Q. forall A. member(A, Q) -> msg_2b(A, B, V1)) & 
									(exists B. exists Q. forall A. member(A, Q) -> msg_2b(A, B, V2)) -> (V1 = V2)


### Voting result -- 3A3Q2V4B -> 3A3Q2V4B
invariant [ic3po1]	(forall A1, V1, B1 . (msg_2b(A1, B1, V1) -> 
						(exists Q.
							((forall A:acceptor. member(A, Q) -> le(B1, maxBal(A))) & 
							(exists C:ballot. ~le(B1, C) & 
								(C ~= negone -> exists A:acceptor. member(A, Q) & msg_2b(A, C, V1)) & 
								(forall D:ballot. (~le(D, C) & ~le(B1, D)) -> 
										(forall A:acceptor. member(A, Q) -> (forall Vd:value. ~msg_2b(A, D, Vd))))))
						)))
invariant [ic3po2]	(forall V2, A1, B1, V1 . (((exists Q. forall A. member(A, Q) -> msg_2b(A, B1, V2)) & msg_2b(A1, B1, V1)) -> (V1 = V2)))
###
