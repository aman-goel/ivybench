(declare-sort node 0)
(declare-sort time 0)

(define-fun .node ((S node)) node (! S :sort 2))
(define-fun .time ((S time)) time (! S :sort 4))

(declare-fun __epoch (node) time)
(declare-fun __has_lock (node) Bool)
(declare-fun __msg (node time) Bool)

(declare-fun epoch (node) time)
(declare-fun has_lock (node) Bool)
(declare-fun msg (node time) Bool)

(define-fun .epoch ((V0 node)) time (! (__epoch V0) :next epoch))
(define-fun .has_lock ((V0 node)) Bool (! (__has_lock V0) :next has_lock))
(define-fun .msg ((V0 node) (V1 time)) Bool (! (__msg V0 V1) :next msg))

(declare-fun first () node)
(declare-fun le (time time) Bool)
(declare-fun max () time)
(declare-fun zero () time)

(define-fun .first () node (! first :global true))
(define-fun .le ((V0 time) (V1 time)) Bool (! (le V0 V1) :global true))
(define-fun .max () time (! max :global true))
(define-fun .zero () time (! zero :global true))

(define-fun .prop () Bool (! 
 (let (($v (forall ((X node) (Y node)) (not (and (not (= X Y)) (__has_lock X) (__has_lock Y))))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v (and (forall ((X time)) (le X X)) (forall ((X time) (Y time) (Z time)) (=> (and (le X Y) (le Y Z)) (le X Z))) (forall ((X time) (Y time)) (=> (and (le X Y) (le Y X)) (= X Y))) (forall ((X time) (Y time)) (or (le X Y) (le Y X))) (forall ((X time)) (le zero X)) (forall ((X time)) (le X max)))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v (and (forall ((V0 node)) (= (__has_lock V0) (= V0 first))) (forall ((V0 node) (V1 time)) (= (__msg V0 V1) false)) (forall ((V0 node)) (= (__epoch V0) zero)))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:release_lock () Bool (! 
 (let (($v (exists ((V__fml:t time) (V__fml:x node) (V__fml:y node)) (and (forall ((V0 node)) (= (has_lock V0) (ite (= V0 V__fml:x) false (__has_lock V0)))) (forall ((V0 node) (V1 time)) (= (msg V0 V1) (ite (and (= V0 V__fml:y) (= V1 V__fml:t)) true (__msg V0 V1)))) (__has_lock V__fml:x) (not (le V__fml:t (__epoch V__fml:x)))))
 ))
 (and $v))
 :action ext:release_lock))

(define-fun .action_ext:take_lock () Bool (! 
 (let (($v (exists ((V__fml:t time) (V__fml:y node)) (and (forall ((V0 node)) (= (has_lock V0) (ite (= V0 V__fml:y) true (__has_lock V0)))) (forall ((V0 node)) (= (epoch V0) (ite (= V0 V__fml:y) V__fml:t (__epoch V0)))) (__msg V__fml:y V__fml:t) (not (le V__fml:t (__epoch V__fml:y)))))
 ))
 (and $v))
 :action ext:take_lock))

