#lang ivy1.7

# Hybrid Reliable Broadcast
#
# Widder, J., Schmid, U. Booting clock synchronization in partially
# synchronous systems with hybrid process and link
# failures. Distrib. Comput. 20, 115140
# (2007).https://doi.org/10.1007/s00446-007-0026-0
#
# Bbased on hybrid_reliable_broadcast_cisa.ivy from:
# Berkovits I., Lazic M., Losa G., Padon O., Shoham S. Verification of Threshold-Based Distributed Algorithms by Decomposition to Decidable Logics. CAV 2019. https://link.springer.com/chapter/10.1007%2F978-3-030-25543-5_15
#
# This version includes all 4 node failure modes of Definitions 2, 6 and 7:
#
# f_c: processes are either clean crash or symmetric omission faulty
#      (obedient processes that either perform complete broadcasts or
#      full omissions). That is, when they send they may send to all
#      or to none. Crash is simulated by sending to none from some
#      point onwards.
#
# f_i: processes are either crash faulty or asymmetric omission faulty
#      (obedient processes that may perform incomplete
#      broadcasts). That is, they send only correct messages but may
#      send to a subset of the nodes. Crash is simulated as above.
#
# f_s: processes are symmetric faulty. That is, send arbitrary
#      messages, but either to all or to none.
#
# f_a: processes are arbitrary faulty. That is, send arbitrary
#      messages, and also different messages to different nodes.
#

################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node     # n > tc + 3ta + 2ts + 2ti
type quorum_a # >= ta + ts + 1
type quorum_b # >= n - tc - ta - ts - ti

relation member_a(N:node, Q:quorum_a)
relation member_b(N:node, Q:quorum_b)

# fc - symmetric omission
# fi - arbitrary omission
# fs - symmetric Byzantine
# fa - arbitrary Byzantine

relation member_fc(N:node)
relation member_fi(N:node)
relation member_fs(N:node)
relation member_fa(N:node)

################################################################################
#
# Intersection properties
#
################################################################################

# B( ~fa & ~fc & ~fs & ~fi )
axiom exists B. forall N. member_b(N, B) -> ~member_fa(N) & ~member_fc(N) & ~member_fs(N) & ~member_fi(N)

# nonempty( A & ~fa & ~fs )
axiom forall A_BP. exists N. member_a(N, A_BP) & ~member_fa(N) & ~member_fs(N)

# A( B & ~fa & ~fi )
axiom forall B_CF. exists A. forall N. member_a(N, A) -> member_b(N, B_CF) & ~member_fa(N) & ~member_fi(N)

# fc,fi,fs,fa are disjoint
axiom forall N. ~(member_fc(N) & member_fi(N))
axiom forall N. ~(member_fc(N) & member_fs(N))
axiom forall N. ~(member_fc(N) & member_fa(N))
axiom forall N. ~(member_fi(N) & member_fs(N))
axiom forall N. ~(member_fi(N) & member_fa(N))
axiom forall N. ~(member_fs(N) & member_fa(N))

################################################################################
#
# Protocol state
#
################################################################################

# state of nodes
relation rcv_init(N:node)
relation accept(N:node)

# state of the network
relation sent_msg(N0:node, N1:node) # (src, dst)
relation rcv_msg(N0:node, N1:node) # (src, dst)

# projection of sent_msg
relation sent_msg_proj(N:node) # := exists D. sent_msg(S,D)

after init  {
	accept(N) := false;
	sent_msg(N1, N2) := false;
	sent_msg_proj(N) := false;
	rcv_msg(N1, N2) := false;
}

################################################################################
#
# Protocol transitions
#
################################################################################

################################################################################
# Correct nodes
################################################################################

action receive_init(n:node) = {
	require rcv_init(n);

	sent_msg(n, D) := true;
	sent_msg_proj(n) := true;
}

action receive_msg(n:node, s:node) = {
	require sent_msg(s, n);

	rcv_msg(s, n) := true;
	accept(n) := accept(n) | (exists B. forall N. member_b(N,B) -> rcv_msg(N,n));
	sent_msg(n, D) := sent_msg(n, D) | (exists A. forall N. member_a(N,A) -> rcv_msg(N,n));
	sent_msg_proj(n) := sent_msg_proj(n) | (exists A. forall N. member_a(N,A) -> rcv_msg(N,n));
}

################################################################################
# fc - symmetric omission
################################################################################

# receive_init_c - not needed

action receive_msg_c(n:node, s:node, nondet:bool) = {
	require member_fc(n);
	require sent_msg(s, n);

	rcv_msg(s, n) := true;
	accept(n) := accept(n) | (exists B. forall N. member_b(N,B) -> rcv_msg(N,n));
	sent_msg(n, D) := sent_msg(n, D) | (nondet & (exists A. forall N. member_a(N,A) -> rcv_msg(N,n)));
	sent_msg_proj(n) := sent_msg_proj(n) | (nondet & (exists A. forall N. member_a(N,A) -> rcv_msg(N,n)));
}

################################################################################
# fi - arbitrary omission
################################################################################

action receive_init_i(n:node, nondet:bool) = {
	require member_fi(n);
	require rcv_init(n);
	
	sent_msg_proj(n) := (exists D. sent_msg(n, D)) | nondet;
	sent_msg(n, D) := sent_msg(n, D) | nondet;
}

action receive_msg_i(n:node, s:node, nondet:bool) = {
	require member_fi(n);
	require sent_msg(s, n);
	
	rcv_msg(s, n) := true;
	accept(n) := accept(n) | (exists B. forall N. member_b(N,B) -> rcv_msg(N,n));
	sent_msg_proj(n) := (exists D. sent_msg(n, D)) | (nondet & (exists A. forall N. member_a(N,A) -> rcv_msg(N,n)));
	sent_msg(n, D) := sent_msg(n, D) | (nondet & (exists A. forall N. member_a(N,A) -> rcv_msg(N,n)));
}

################################################################################
# fs - symmetric Byzantine
################################################################################

action faulty_send_s(n:node) = {
	require member_fs(n);
	
	sent_msg(n, D) := true;
	sent_msg_proj(n) := true;
}

action faulty_state_sa(n:node) = {
	require ( member_fs(n) | member_fa(n) );
	
	rcv_msg(S, n) := *;
	accept(n) := *;
}

################################################################################
# fa - arbitrary Byzantine
################################################################################

action faulty_send_a(n:node, nondet:bool) = {
	require member_fa(n);
	
	sent_msg_proj(n) := (exists D. sent_msg(n, D)) | nondet;
	sent_msg(n, D) := sent_msg(n, D) | nondet;
}

export receive_init
export receive_msg
export receive_msg_c
export receive_init_i
export receive_msg_i
export faulty_send_s
export faulty_state_sa
export faulty_send_a


################################################################################
#
# Safety property
#
################################################################################

invariant [1000000] (exists N. ~member_fs(N) & ~member_fa(N) & accept(N)) -> (exists M. ~member_fs(M) & ~member_fa(M) & rcv_init(M))

#invariant sent_msg_proj(N1) -> exists N2. sent_msg(N1,N2) # breaks decidability

#invariant sent_msg(N1,N2) -> sent_msg_proj(N1)
#invariant ~member_fs(N2) & ~member_fa(N2) & rcv_msg(N1,N2) -> sent_msg(N1,N2)
#invariant ~member_fi(N1) & ~member_fa(N1) & sent_msg_proj(N1) -> sent_msg(N1,N2) # symmetric where it should be
#invariant ~member_fs(N1) & ~member_fa(N1) & sent_msg(N1,N2) & ~rcv_init(N1) -> exists A. forall M. member_a(M,A) -> sent_msg_proj(M)
#invariant ~member_fs(N1) & ~member_fa(N1) & accept(N1) -> exists B. forall M. member_b(M,B) -> sent_msg_proj(M)
#invariant (exists A. forall M. member_a(M,A) & ~member_fs(M) & ~member_fa(M) -> sent_msg_proj(M)) -> (exists N. ~member_fs(N) & ~member_fa(N) & rcv_init(N))
