#lang ivy1.7

type node

relation lock_msg(N:node)
relation grant_msg(N:node)
relation unlock_msg(N:node)
relation holds_lock(N:node)
individual server_holds_lock: bool

after init  {
	lock_msg(N) := false;
	grant_msg(N) := false;
	unlock_msg(N) := false;
	holds_lock(N) := false;
	server_holds_lock := true;
}

action send_lock(n: node) = {
  lock_msg(n) := true;
}

action recv_lock(n: node) = {
  require server_holds_lock;
  require lock_msg(n);

  server_holds_lock := false;
  lock_msg(N) := lock_msg(N) & N ~= n;
  grant_msg(n) := true;
}

action recv_grant(n: node) = {
  require grant_msg(n);

  grant_msg(N) := grant_msg(N) & N ~= n;
  holds_lock(n) := true;
}

action unlock(n: node) = {
  require holds_lock(n);

  holds_lock(N) := holds_lock(N) & N ~= n;
  unlock_msg(n) := true;
}

action recv_unlock(n: node) = {
  require unlock_msg(n);

  unlock_msg(N) := unlock_msg(N) & N ~= n;
  server_holds_lock := true;
}

export send_lock
export recv_lock
export recv_grant
export unlock
export recv_unlock

invariant [safety] holds_lock(N1) & holds_lock(N2) -> N1 = N2

#invariant [help_1] grant_msg(N1) & grant_msg(N2) -> N1 = N2
#invariant [help_2] unlock_msg(N1) & unlock_msg(N2) -> N1 = N2

#invariant [help_3] ~(holds_lock(N1) & grant_msg(N2))
#invariant [help_4] ~(holds_lock(N1) & unlock_msg(N2))
#invariant [help_5] ~(grant_msg(N1) & unlock_msg(N2))

#invariant [help_6] ~(grant_msg(N) & server_holds_lock)
#invariant [help_7] ~(holds_lock(N) & server_holds_lock)
#invariant [help_8] ~(unlock_msg(N) & server_holds_lock)
